swagger: '2.0'
info:
  description: 'This documentation is about the backend of Kesowa ARU webapp.  You can find out more about ARU at [https://kesowa.com/](https://kesowa.com/)'
  version: 1.3.11
  title: Kesowa API
  termsOfService: 'https://kesowa.com/about-us/'
  contact:
    name: ARU Support
    url: 'https://kesowa.com/contact-us/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:5011'
basePath: /api/v1
paths:
  /alert/upload-alert-image:
    post:
      tags:
        - Alert APIs
      description: Used to upload alert images from video player in the frontend
      operationId: upload-alert-image
      parameters:
        - in: formData
          name: filename
          type: string
          description: The uploaded alert image
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          description: File upload successful
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  file:
                    type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/create:
    post:
      tags:
        - Alert APIs
      description: Create an alert from video player in frontend
      operationId: alert-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data of the new alert to be created
          schema:
            $ref: '#/definitions/alert'
      responses:
        '201':
          description: New alert created
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/alert'
        '401':
          description: Invalid user id or tokens OR Invalid Inputs
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Alert count exceeded
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/manual-upload-alert:
    post:
      tags:
        - Alert APIs
      description: Manually upload new alert
      operationId: manual-upload-alert
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data of the new alert to be created
          schema:
            $ref: '#/definitions/alert'
      responses:
        '200':
          description: New alert created successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/alert'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-by-flight-or-location-ID:
    get:
      tags:
        - Alert APIs
      description: Fetch all alerts by either location or flightID
      operationId: get-alerts-by-flight-or-location-ID
      produces:
        - application/json
      parameters:
        - in: query
          name: flightID
          type: string
          description: Flight ID of the alerts to search for
        - in: query
          name: locationID
          type: string
          description: Location ID of the alerts to search for
      responses:
        '200':
          description: Return alerts found after search
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
        '401':
          description: Invalid user id or tokens OR Wrong flightID or location ID passed
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alert-by-ID:
    get:
      tags:
        - Alert APIs
      description: Fetch an alert by it's ID
      operationId: get-alert-by-ID
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: ID of the alert to be fetched
      responses:
        '200':
          description: Alert fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Alert not found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-by-location-ID:
    get:
      tags:
        - Alert APIs
      description: Fetch alerts by location ID
      operationId: get-alerts-by-location-ID
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: Location ID of the alert to be fetched
      responses:
        '200':
          description: Alert fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    locationName:
                      type: string
                    location:
                      type: string
                    alertImage:
                      type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Alert not found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alert-by-location-ID-and-time:
    get:
      tags:
        - Alert APIs
      description: Fetch alerts having given location ID in timespan between given date and current date
      operationId: get-alert-by-location-ID-and-time
      produces:
        - application/json
      parameters:
        - in: query
          name: time
          type: string
          description: Time after which alerts are to be fetched
        - in: query
          name: locationID
          type: string
          description: Location ID of the alert to be fetched
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    alertID:
                      type: string
                    alertImage:
                      type: string
                    coordinates:
                      type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alerts found with given location ID after given time
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-number-of-alerts-By-location-ID:
    get:
      tags:
        - Alert APIs
      description: Get number of alerts by location ID
      operationId: get-number-of-alerts-By-location-ID
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: Location ID of the alert to be fetched
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: integer
              location:
                type: array
                items:
                  type: object
                  properties:
                    locationName:
                      type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alerts found with given location ID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-By-mission-ID:
    get:
      tags:
        - Alert APIs
      description: Fetch a fixed number of alerts by mission ID with adjustments for pagination
      operationId: get-alerts-By-mission-ID
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: Mission ID of the alerts to be fetched
        - in: query
          name: page
          type: integer
          description: Page number of pagination
        - in: query
          name: limit
          type: integer
          description: Number of items per page in pagination
        - in: query
          name: sortBy
          type: string
          description: Field by which the results will be sorted
        - in: query
          name: alertType
          type: string
          description: 'Optional query parameter. If passed, results will be searched for by type, else by tenant ID'
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
              total:
                type: integer
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alert found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-By-location-id-pagination:
    get:
      tags:
        - Alert APIs
      description: Fetch a fixed number of alerts by location ID with adjustments for pagination
      operationId: get-alerts-By-location-id-pagination
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: Location ID of the alerts to be fetched
        - in: query
          name: page
          type: integer
          description: Page number of pagination
        - in: query
          name: limit
          type: integer
          description: Number of items per page in pagination
        - in: query
          name: sortBy
          type: string
          description: Field by which the results will be sorted
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
              total:
                type: integer
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alert found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-by-mission-mapref:
    get:
      tags:
        - Alert APIs
      description: Get alerts and mission data by mission ID and tenant ID of current user
      operationId: get-alerts-by-mission-mapref
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: Mission ID of the alert to be fetched
      responses:
        '200':
          description: Alerts and mission data fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    alertID:
                      type: string
                    alertImage:
                      type: string
                    coordinated:
                      type: string
                    missionName:
                      type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alert found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/test-alert-inject:
    patch:
      tags:
        - Alert APIs
      description: 'Test API for injecting custom locationID, flightID and missionID on to specified number of alerts'
      operationId: test-alert-inject
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New alert fields after modification
          schema:
            type: object
            properties:
              userId:
                type: string
              locationId:
                type: string
              missionId:
                type: string
              flightId:
                type: string
              tenantId:
                type: string
      responses:
        '200':
          description: Injected successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Error in injecting
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-by-tenantid:
    get:
      tags:
        - Alert APIs
      description: Fetches alerts by tenant ID of current user which were created between given time and current time
      operationId: get-alerts-by-tenantid
      produces:
        - application/json
      parameters:
        - in: query
          name: time
          type: string
          description: Alerts in timespan between this time and current time will be fetched
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    alertID:
                      type: string
                    alertImage:
                      type: string
                    coordinates:
                      type: string
              count:
                type: integer
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alert found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/get-alerts-by-tenantid-advanced-result:
    get:
      tags:
        - Alert APIs
      description: 'Fetch alerts with multiple query options. Can either fetch alerts in given time range OR alerts after given time OR all alerts by current user''s tenant Id if no time or timeRange query is given. Can filter these results by user Id. Finally, it provides paginated results.'
      operationId: get-alerts-by-tenantid-advanced-result
      produces:
        - application/json
      parameters:
        - in: query
          name: timeRange
          type: string
          description: Optional query to get all alerts created in given time range
        - in: query
          name: time
          type: string
          description: Optional query to get all alerts created between given date and current date
        - in: query
          name: user
          type: string
          description: Optional query to filter results by specific user Id
        - in: query
          name: page
          type: string
          description: Page number for paginated results
        - in: query
          name: limit
          type: string
          description: Number of items per page of paginated results
      responses:
        '200':
          description: Alerts fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/alert'
              total:
                type: integer
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No alert found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/convert-all-image-to-thumbnail:
    get:
      tags:
        - Alert APIs
      description: Converts all alert images of the current tenant into thumbnails and stores them in server
      operationId: convert-all-image-to-thumbnail
      responses:
        '200':
          description: All alert images converted to thumbnail successfully!
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Alert not found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /alert/delete-multiple-alerts:
    delete:
      tags:
        - Alert APIs
      description: Delete alerts by ID
      operationId: delete-multiple-alerts
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The request body should contain an array of IDs of alerts to be deleted
          schema:
            type: object
            properties:
              id:
                type: array
                description: IDs of alerts to be deleted
                items:
                  type: string
      responses:
        '200':
          description: 'Alerts, if found, deleted successfully'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '400':
          description: Alert ID not given or wrong
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/create:
    post:
      tags:
        - Asset APIs
      description: Create an asset
      operationId: asset-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data of the new asset to be created
          schema:
            $ref: '#/definitions/asset'
        - in: header
          name: userid
          description: ID of user who is creating the asset
          type: string
          required: true
      responses:
        '201':
          description: New asset created
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/get:
    get:
      tags:
        - Asset APIs
      description: Fetch an asset by assetID
      operationId: asset-get
      produces:
        - application/json
      parameters:
        - in: query
          name: assetID
          description: ID of the asset to be fetched
          type: string
      responses:
        '200':
          description: Asset found and fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Asset not found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/get-all-asset:
    get:
      tags:
        - Asset APIs
      description: Fetch all the assets of the current tenant
      operationId: get-all-asset
      produces:
        - application/json
      responses:
        '200':
          description: All assets of current tenant fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  gotDoc:
                    type: array
                    items:
                      $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Current tenant has no assets
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/update:
    patch:
      tags:
        - Asset APIs
      description: Update an asset
      operationId: asset-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New updated data of the asset
          schema:
            $ref: '#/definitions/asset'
      responses:
        '200':
          description: Asset updated successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No assets found with given assetID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/delete:
    delete:
      tags:
        - Asset APIs
      description: Delete an asset
      operationId: asset-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: AssetId to be passed in request body
          schema:
            type: object
            properties:
              assetID:
                type: string
      responses:
        '200':
          description: Asset deleted successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No asset exists with given assetID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /asset/toggle-asset-status:
    patch:
      tags:
        - Asset APIs
      description: Toggle the isActive status of an asset
      operationId: toggle-asset-status
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data of the asset whose status is to be toggled
          schema:
            $ref: '#/definitions/asset'
      responses:
        '200':
          description: Asset status toggled successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/asset'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No assets found with given assetID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /assetclass/create:
    post:
      tags:
        - Asset Class APIs
      description: Create an asset class
      operationId: asset-class-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data of the new asset class to be created
          schema:
            $ref: '#/definitions/assetClass'
        - in: header
          name: userid
          description: ID of user who is creating the asset class
          type: string
          required: true
      responses:
        '201':
          description: New asset class created
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/assetClass'
        '400':
          description: Invalid data sent in request
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens OR user doesn't have required permissions
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /assetclass/get:
    get:
      tags:
        - Asset Class APIs
      description: Fetch all asset classes
      operationId: asset-class-get
      produces:
        - application/json
      responses:
        '200':
          description: Asset Classes fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/assetClass'
        '401':
          description: Invalid user id or tokens OR user doesn't have required permissions
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /assetclass/update:
    patch:
      tags:
        - Asset Class APIs
      description: Update an asset class
      operationId: asset-class-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New updated data of the asset class
          schema:
            $ref: '#/definitions/assetClass'
      responses:
        '200':
          description: Asset Class updated successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/assetClass'
        '401':
          description: Invalid user id or tokens OR user doesn't have required permissions
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No asset classes found with given id
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /assetclass/get-asset-class-by-id:
    get:
      tags:
        - Asset Class APIs
      description: Fetch asset class by id
      operationId: get-asset-class-by-id
      produces:
        - application/json
      parameters:
        - in: query
          name: _id
          description: Id of the asset class to be fetched
          type: string
      responses:
        '200':
          description: Asset Class fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/assetClass'
        '401':
          description: Invalid user id or tokens OR user doesn't have required permissions
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Asset Class doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /assetclass/delete:
    delete:
      tags:
        - Asset Class APIs
      description: Delete an asset class
      operationId: asset-class-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Asset Class Id to be passed in request body
          schema:
            type: object
            properties:
              id:
                type: string
      responses:
        '200':
          description: Asset Class deleted successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens OR user doesn't have required permissions
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Asset Class doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /auth/login:
    post:
      tags:
        - Auth APIs
      description: Login route for all users
      operationId: login
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login request body
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Log In Successful
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              token:
                type: string
              data:
                $ref: '#/definitions/user'
        '400':
          description: 'Invalid Inputs, validation checks failed'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    msg:
                      type: string
                    param:
                      type: string
        '401':
          description: User is not active OR Invalid password OR client expired OR expired credentials. Check the message for further details.
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: User doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /auth/userdetails:
    get:
      tags:
        - Auth APIs
      description: Get currently logged in user's details
      operationId: userdetails
      produces:
        - application/json
      responses:
        '200':
          description: User Details fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/user'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: 'Current user''s user group not found, couldn''t fetch details'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/auth/reset-password/{token}':
    get:
      tags:
        - Auth APIs
      description: Renders the reset password page if user has a valid password reseting token
      operationId: reset-password-get
      produces:
        - application/json
      parameters:
        - in: path
          name: token
          description: 'The token that was sent in the link to reset password, in the forgot password email'
          required: true
          type: string
      responses:
        '200':
          description: Token verified and reset password page rendered successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid reset password token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
    post:
      tags:
        - Auth APIs
      description: Reset the password of the user by updating in database
      operationId: reset-password-post
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of request should contain the new password and confirmed new password
          schema:
            type: object
            required:
              - password1
              - password2
            properties:
              password:
                type: string
              password2:
                type: string
        - in: path
          name: token
          description: 'The token that was sent in the link to reset password, in the forgot password email.'
          required: true
          type: string
      responses:
        '200':
          description: Password reset successfully and user is logged out and redirected to login page
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '400':
          description: New password and confirm new password fields are either not filled or don't match
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid reset password token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /auth/forgot-password:
    post:
      tags:
        - Auth APIs
      description: Send email to user containing a link to reset password
      operationId: forgot-password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request. Must contain email of user.
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        '200':
          description: Email to reset password sent successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '400':
          description: Email to reset password has already been sent OR User has reached daily limit to change password
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Given email doesn't belong to any registered user
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/get-meta-data:
    patch:
      tags:
        - Base Layer APIs
      description: Fetches metadata of a baselayer
      operationId: baselayer-get-meta-data
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body should contain an array of layer ids
          schema:
            type: object
            properties:
              layers:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Meta Data fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    missionId:
                      type: string
                    missionName:
                      type: string
                    layers:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          fields:
                            type: array
                            items:
                              type: object
                              properties:
                                key:
                                  type: string
                                value:
                                  type: string
                                layerMatches:
                                  type: integer
        '400':
          description: Only one type of layers can be mapped. All layers whose IDs are provided are not of same type.
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: 'Some of the layers whose ids were given, were not found'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/baselayer/create/{type}':
    post:
      tags:
        - Base Layer APIs
      description: Create new base layer
      operationId: baselayer-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Details about the new layer to be created
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              vector:
                type: string
              captureDate:
                type: string
              color:
                type: string
              icon:
                type: string
              inHeritOriginalColorFromFile:
                type: boolean
        - in: path
          name: type
          required: true
          type: string
      responses:
        '201':
          description: New base layer created
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  layer:
                    $ref: '#/definitions/layer'
                  properties:
                    type: object
        '400':
          description: Color Selection Error OR Geojson doesn't have a color
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Geojson file path doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/get-meta-data-for-update:
    patch:
      tags:
        - Base Layer APIs
      description: Fetches metadata of a existing baselayer for update
      operationId: baselayer-get-meta-data-for-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body should contain an array of layer ids and the baseLayer id
          schema:
            type: object
            properties:
              layers:
                type: array
                items:
                  type: string
              baseLayer:
                type: string
      responses:
        '200':
          description: Meta Data fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  layerAttr:
                    type: array
                    items:
                      type: object
                      properties:
                        missionId:
                          type: string
                        missionName:
                          type: string
                        layers:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              name:
                                type: string
                              fields:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                    layerMatches:
                                      type: integer
                  pAttr:
                    type: array
                    items:
                      type: string
        '400':
          description: More than one type of layers present OR vector type of selected layers is different from base layer
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: 'Some of the layers whose ids were given, were not found'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/set-prime-attr:
    put:
      tags:
        - Base Layer APIs
      description: Adds prime attributes to features of the geojson file of the base layer
      operationId: baselayer-set-prime-attr
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Body should contain Id of base layer, path to geojson file of the layer, and array of prime attributes'
          schema:
            type: object
            properties:
              path:
                type: string
              id:
                type: string
              pattr:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Prime attributes added successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: File path doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/create-by-layers:
    post:
      tags:
        - Base Layer APIs
      description: Create base layer by attributes
      operationId: baselayer-create-by-layers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Body should contain name, vectorTypeId, array of prime attributes, array of layers, and optionally color'
          schema:
            type: object
            required:
              - name
              - vectorTypeId
              - layers
              - pattr
            properties:
              name:
                type: string
              vectorTypeId:
                type: string
              color:
                type: string
              layers:
                type: array
                items:
                  type: object
                  properties:
                    layerId:
                      type: string
                    attrMapping:
                      type: object
              pattr:
                type: array
                items:
                  type: string
      responses:
        '201':
          description: Successfully created base layer
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: File path to geojson file of any of the layers doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/filter-base-layer:
    post:
      tags:
        - Base Layer APIs
      description: Filter Base Layers
      operationId: baselayer-filter-base-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request
          schema:
            type: object
            properties:
              createdAt:
                type: string
              name:
                type: string
              captureDate:
                type: string
              time:
                type: string
              rasterProps:
                type: array
                items:
                  type: string
              vectorProps:
                type: array
                items:
                  type: string
              vectorPropsType:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successfully filtered vector or raster data
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No data found which satisfies given filter parameters
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/update-by-layers:
    patch:
      tags:
        - Base Layer APIs
      description: Update base layer by attribute
      operationId: baselayer-update-by-layers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body should contain an array of layer ids and the baseLayer id
          schema:
            type: object
            properties:
              layers:
                type: array
                items:
                  type: object
                  properties:
                    layerId:
                      type: string
                    attrMapping:
                      type: object
              baseLayer:
                type: string
      responses:
        '200':
          description: Layer updated successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '400':
          description: Layer type of all layers must be same as base layer
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: File path to geojson file of any of the layers doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/baselayer/fetch/{type}':
    get:
      tags:
        - Base Layer APIs
      description: 'Fetch base layers by type : ''Vector'' or ''Raster'' or ''All''. All fetches all base layers.'
      operationId: baselayer-fetch
      produces:
        - application/json
      parameters:
        - in: path
          name: type
          description: 'Can have either of these three values: [''Vector'', ''Raster'', ''All'']'
          type: string
          required: true
      responses:
        '200':
          description: Base Layers fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: 'Valid type not provided. Type must be either of these: [''Vector'', ''Raster''. ''All''].'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/baselayer/upload-to-update-base-layer/{type}':
    post:
      tags:
        - Base Layer APIs
      description: Upload geojson to update base layer
      operationId: baselayer-upload-to-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            type: object
            properties:
              baseLayer:
                type: string
        - in: path
          name: type
          required: true
          type: string
      responses:
        '200':
          description: Base Layer updated successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  primeAttributes:
                    type: array
                    items:
                      type: string
                  layerAttributes:
                    type: array
                    items:
                      type: object
                      properties:
                        attr:
                          type: string
                        value:
                          type: string
                  filePath:
                    type: string
                  baseLayer:
                    type: string
        '400':
          description: The geojson file must be of same type as the base layer
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: 'Geojson not saved, geojson filepath doesn''t exist'
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/update-base-layer-by-uploaded-layer:
    patch:
      tags:
        - Base Layer APIs
      description: Upload a layer to update base layer
      operationId: update-base-layer-by-uploaded-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request
          schema:
            type: object
            properties:
              filePath:
                type: string
              baseLayer:
                type: string
              attrMapping:
                type: object
      responses:
        '200':
          description: Base Layer updated successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  primeAttributes:
                    type: array
                    items:
                      type: string
                  layerAttributes:
                    type: array
                    items:
                      type: object
                      properties:
                        attr:
                          type: string
                        value:
                          type: string
                  filePath:
                    type: string
                  baseLayer:
                    type: string
        '400':
          description: The geojson file of new layer and base layer must be of same type
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Geojson file path of layer or base layer doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/create-base-raster-import-mission:
    post:
      tags:
        - Base Layer APIs
      description: Create base layer by importing mission
      operationId: baselayer-create-base-raster-import-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request
          schema:
            type: object
            properties:
              name:
                type: string
              layers:
                type: array
                items:
                  type: string
              captureDate:
                type: string
      responses:
        '201':
          description: Base Layer created successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '400':
          description: The layers with given ids have incompatible layer types
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No layers found with given layer ids
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/delete-baseLayer-id:
    delete:
      tags:
        - Base Layer APIs
      description: Delete base layer (and all layers on top of it) by id
      operationId: baselayer-delete-baseLayer-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request should contain an array of ids of layers
          schema:
            type: object
            properties:
              layers:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Base layer successfully deleted
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '400':
          description: Layer Id array is empty
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Base Layer couldn't be found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/baselayer/create-base-raster-upload/{type}':
    post:
      tags:
        - Base Layer APIs
      description: Create base layer from uploaded raster file
      operationId: baselayer-create-base-raster-upload
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request
          schema:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              raster:
                type: string
              captureDate:
                type: string
        - in: path
          name: type
          required: true
          type: string
      responses:
        '201':
          description: Base Layer created successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded OR Number of layers exceeded package limit
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/baselayer/updateRasterLayerUpload/{type}':
    patch:
      tags:
        - Base Layer APIs
      description: Update Raster base layer by uploaded raster file
      operationId: baselayer-updateRasterLayerUpload
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body should contain Id of the raster base layer to be updated
          schema:
            type: object
            properties:
              layerId:
                type: string
        - in: path
          name: type
          required: true
          type: string
      responses:
        '200':
          description: Raster layer updated sucessfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Layer not Found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/updateRasterLayerImport:
    patch:
      tags:
        - Base Layer APIs
      description: Update raster base layer by importing from raster layers
      operationId: baselayer-updateRasterLayerImport
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body contains layerId of base raster layer and array of raster layers to be imported
          schema:
            type: object
            properties:
              layerId:
                type: string
              layers:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Base Raster layer updated sucessfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '400':
          description: Raster layers with given Ids have incompatible layer types
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Base raster layer not found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/updateisBase:
    patch:
      tags:
        - Base Layer APIs
      description: Make isBase property false for all layers owned by current tenant
      operationId: baselayer-updateisBase
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: All layer documents modified
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No layer documents found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/create-base-vector-layer:
    post:
      tags:
        - Base Layer APIs
      description: Create base layer from geojson file
      operationId: baselayer-create-base-vector-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of the request
          schema:
            type: object
            properties:
              name:
                type: string
              vectorId:
                type: string
              geoJSON:
                type: object
      responses:
        '201':
          description: Successfully created base layer
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
        '400':
          description: Color selection error in geojson sent in request
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired OR Storage limit of package exceeded OR Number of layers exceeded package limit
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: File path to geojson file doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/publishBaseLayer:
    patch:
      tags:
        - Base Layer APIs
      summary: Summary
      description: Make base layer public by publishing it
      operationId: baselayer-publishBaseLayer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Body of request contains layerId
          schema:
            type: object
            properties:
              layerId:
                type: string
      responses:
        '200':
          description: Base layer has been made public
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/layer'
              publicMapRef:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Base layer not Found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/getallpublicbaselayers:
    get:
      tags:
        - Base Layer APIs
      description: Fetch all public base layers
      operationId: baselayer-getallpublicbaselayers
      produces:
        - application/json
      parameters:
        - in: query
          name: mapRef
          description: MapRef of layers to be fetched
          type: string
      responses:
        '200':
          description: Fetched all public base layers successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: No mapRef passed in query
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No map data found for given mapRef
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/updateisPublic:
    patch:
      tags:
        - Base Layer APIs
      description: Make isPublic property false for all layers owned by current tenant
      operationId: baselayer-updateisPublic
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: All layer documents modified
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No layer documents found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /baselayer/searchPublicLayer:
    get:
      tags:
        - Base Layer APIs
      description: 'Search for public layers having given key:value pairs in geojson feature properties'
      operationId: baselayer-searchPublicLayer
      produces:
        - application/json
      parameters:
        - in: query
          name: mapRef
          description: Public mapref of tenant
          type: string
        - in: query
          name: key
          description: Key to search for in geojson feature properties
          type: string
        - in: query
          name: value
          description: Value to search for in geojson feature properties
          type: string
      responses:
        '200':
          description: Layer with matching search parameters found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              layerId:
                type: string
              data:
                type: array
                items:
                  type: object
        '400':
          description: Invalid PublicMapRef
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '401':
          description: Invalid user id or tokens
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '403':
          description: Package has expired
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No public layers found OR No matching layer found
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /client/create:
    post:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: client-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/get-mission-list-for-Id:
    get:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: get-mission-list-for-Id
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/edit-client-details:
    patch:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: edit-client-details
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/get-list-client:
    get:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: get-list-client
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/delete-client:
    delete:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: delete-client
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/insert-client-for-mission:
    patch:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: insert-client-for-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/remove-client-from-mission:
    patch:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: remove-client-from-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/geneate-client-csv:
    get:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: geneate-client-csv
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/patch-api-clientarr:
    patch:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: patch-api-clientarr
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  '/client/get-client-mission-details/{id}':
    get:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: get-client-mission-details
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Success
  /client/get-client-by-email:
    get:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: get-client-by-email
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /client/invite-client-to-mission:
    post:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: invite-client-to-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  '/client/register/{token}':
    post:
      tags:
        - Client APIs
      summary: Summary
      description: Description
      operationId: client-register
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: token
          required: true
          type: string
      responses:
        '200':
          description: Success
  /common/check-email-available:
    post:
      tags:
        - Common APIs
      summary: Summary
      description: Description
      operationId: check-email-available
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/create:
    post:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: document-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/delete:
    delete:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: document-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/delete-multiple:
    delete:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: document-delete-multiple
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/getbymissionId:
    get:
      tags:
        - Document APIs
      description: Fetch documents by mission ID
      operationId: document-get-by-mission-Id
      produces:
        - application/json
      parameters:
        - in: query
          name: missionID
          description: Mission Id whose documents to be fetched
          type: string
      responses:
        '200':
          description: Documents fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  mission:
                    type: string
                  documents:
                    type: array
                    items:
                      $ref: '#/definitions/document'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No documents found for given mission ID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /document/zipbyId:
    get:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: document-zip-by-id
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/gen_2x_documents:
    patch:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: gen-2x-documents
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /document/update-size-for-exist-doc:
    patch:
      tags:
        - Document APIs
      summary: Summary
      description: Description
      operationId: document-update-size
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/create:
    post:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/edit:
    post:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/delete:
    post:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/mission-specific-view:
    post:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-mission-specific-view
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/all-flights:
    get:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: get-all-flights
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/flightswithoutmission:
    get:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-without-mission
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/get-flight-by-location-ID:
    get:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-by-location-Id
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/assign-pilot-self:
    patch:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-assign-pilot-self
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flight/assign-pilot:
    patch:
      tags:
        - Flight APIs
      summary: Summary
      description: Description
      operationId: flight-assign-pilot
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flightlog/create:
    post:
      tags:
        - Flight Log APIs
      summary: Summary
      description: Description
      operationId: flightlog-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flightlog/get:
    get:
      tags:
        - Flight Log APIs
      summary: Summary
      description: Description
      operationId: get-flightlog
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flightlog/last-flightlog-by-ID:
    get:
      tags:
        - Flight Log APIs
      summary: Summary
      description: Description
      operationId: last-flightlog-by-ID
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /flightlog/last-flightlog-by-location-ID:
    get:
      tags:
        - Flight Log APIs
      summary: Summary
      description: Description
      operationId: get-last-flightlog-by-location-ID
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  '/layer/create/{type}':
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: type
          required: true
          type: string
      responses:
        '200':
          description: Success
  /layer/upload-file-to-layer:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: upload-file-to-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/delete-file-geojson:
    delete:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-delete-file-goejson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/edit-layer:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/edit-geojson:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-edit-geojson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/addFeature:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-add-feature
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/upload-file-geojson:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-upload-geojson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/get-files-by-layerId-fIndex:
    get:
      tags:
        - Layer APIs
      description: Fetch files by layer ID or sys_ID or both layer ID and sys_ID as per queries passed. Fetches only the layerFiles under review.
      operationId: layer-get-files-by-layerId-fIndex
      produces:
        - application/json
      parameters:
        - in: query
          name: layerId
          description: 'Optional query used while searching by either only layer Id, or, both sys_id and layer Id'
          type: string
        - in: query
          name: sys_id
          description: 'Optional query used while searching by either only sys_id, or, both sys_id and layer Id'
          type: string
      responses:
        '200':
          description: Layers fetched successfully by either layer Id or sys_id or both as per queries passed in request
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/layerFiles'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No layers found with given layer ID or sys_ID or both
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /layer/delete:
    delete:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/delete-layers:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-delete-layers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/delete-geojson:
    delete:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-delete-geojson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/getbymissionId:
    get:
      tags:
        - Layer APIs
      description: Fetches layers by mission Id
      operationId: layer-getbymissionId
      produces:
        - application/json
      parameters:
        - in: query
          name: missionId
          description: Mission Id whose layers to be fetched
          type: string
      responses:
        '200':
          description: Layers fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  mission:
                    type: string
                  centerPoints:
                    type: object
                    properties:
                      lat:
                        type: integer
                      lng:
                        type: integer
                  layers:
                    type: array
                    items:
                      $ref: '#/definitions/layer'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No layer exists for given mission ID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /layer/getrasterdetailsbyID:
    get:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-getrasterdetailsbyID
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/changecolorbyId:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-changecolorbyId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/downloadassetbylayerId:
    get:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-downloadassetbylayerId
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/create-vector-layer:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-create-vector-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/sort-all-layer:
    $ref: '#/paths/~1layer~1delete'
  /layer/filter-layer:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-filter-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/get-feature-by-layerId:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-get-feature-by-layerId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/set-cover-photo-by-layerFiles-Id:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-set-cover-photo-by-layerFiles-Id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/get-feature-csv-by-layerIndex:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-get-feature-csv-by-layerIndex
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/auto-assign-uploaded-image:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-auto-assign-uploaded-image
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/assignLayerLabel:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-assignLayerLabel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/images-review:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-images-review
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/fetch-to-be-reviwed-files:
    get:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-fetch-to-be-reviwed-files
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/all-layers-for-mission:
    get:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-all-layers-for-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/download-asset-by-Id-to-kml:
    get:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-download-asset-by-Id-to-kml
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/gen_2x_layerfiles:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-gen_2x_layerfiles
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/add-isReview-to-layerFiles:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-add-isReview-to-layerFiles
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/pick-to-map-for-layer:
    post:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-pick-to-map-for-layer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/delete-multipleLayerFiles:
    delete:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-delete-multipleLayerFiles
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/inject_sysId:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-inject_sysId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layer/inject_sysId_layerfiles:
    patch:
      tags:
        - Layer APIs
      summary: Summary
      description: Description
      operationId: layer-inject_sysId_layerfiles
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layergroup/create:
    post:
      tags:
        - Layer Group APIs
      summary: Summary
      description: Description
      operationId: layergroup-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layergroup/edit:
    patch:
      tags:
        - Layer Group APIs
      summary: Summary
      description: Description
      operationId: layergroup-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layergroup/fetch:
    get:
      tags:
        - Layer Group APIs
      summary: Summary
      description: Description
      operationId: layergroup-fetch
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layergroup/delete:
    delete:
      tags:
        - Layer Group APIs
      summary: Summary
      description: Description
      operationId: layergroup-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /layergroup/delete-layerId:
    post:
      tags:
        - Layer Group APIs
      summary: Summary
      description: Description
      operationId: layergroup-delete-layerId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/create:
    post:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/get:
    get:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/get-within-by-id:
    get:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-get-within-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/get-by-id:
    get:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-get-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/update:
    patch:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/get-locationID-By-lat-long:
    get:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-get-locationID-By-lat-long
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /location/delete:
    delete:
      tags:
        - Location APIs
      summary: Summary
      description: Description
      operationId: location-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /manufacturer/create:
    post:
      tags:
        - Manufacturer APIs
      summary: Summary
      description: Description
      operationId: manufacturer-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /manufacturer/get:
    get:
      tags:
        - Manufacturer APIs
      summary: Summary
      description: Description
      operationId: manufacturer-get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /manufacturer/get-by-id:
    get:
      tags:
        - Manufacturer APIs
      summary: Summary
      description: Description
      operationId: manufacturer-get-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /manufacturer/update:
    patch:
      tags:
        - Manufacturer APIs
      summary: Summary
      description: Description
      operationId: manufacturer-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /manufacturer/delete:
    delete:
      tags:
        - Manufacturer APIs
      summary: Summary
      description: Description
      operationId: manufacturer-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/create:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/edit:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/delete:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/mission-by-userid:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-mission-by-userid
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get/tenant:
    get:
      tags:
        - Mission APIs
      description: Fetches advanced formatted results by tenant Id
      operationId: mission-get-tenant
      produces:
        - application/json
      parameters:
        - in: query
          name: filter
          description: Filters for advanced results
          type: string
        - in: query
          name: missionType
          description: Mission Type for advanced results
          type: string
        - in: query
          name: client
          description: Client
          type: string
        - in: query
          name: sort
          description: 'String of format <field>:<sorting order> used to get result sorted in some order by some field'
          type: string
        - in: query
          name: page
          description: Page number for paginated results
          type: integer
        - in: query
          name: limit
          description: Number of items per page for paginated results
          type: integer
        - in: query
          name: searchFilters
          description: Search filters for advanced results
          type: string
      responses:
        '200':
          description: Results fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  required:
                    - name
                    - assetID
                    - missionType
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    deliverables:
                      type: array
                      items:
                        type: string
                    user:
                      type: string
                    assetID:
                      type: string
                    clientId:
                      type: array
                      items:
                        type: string
                    status:
                      type: string
                    pilotAssigned:
                      type: string
                    tenantId:
                      type: string
                    missionType:
                      type: string
                    createdAt:
                      type: string
                    updatedAt:
                      type: string
                    flight:
                      type: object
                      $ref: '#/definitions/flight'
              total:
                type: integer
              missionCount:
                type: integer
        '500':
          description: server error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  '/mission/get/user/{id}':
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Success
  '/mission/get/{id}':
    get:
      tags:
        - Mission APIs
      description: Fetches mission by mission Id and tenant Id of current user
      operationId: mission-get
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Id of mission to be fetched
          type: string
          required: true
      responses:
        '200':
          description: Mission fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              data:
                type: object
                required:
                  - name
                  - assetID
                  - missionType
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  deliverables:
                    type: array
                    items:
                      type: string
                  user:
                    type: string
                  assetID:
                    type: string
                  clientId:
                    type: array
                    items:
                      type: string
                  status:
                    type: string
                  pilotAssigned:
                    type: string
                  tenantId:
                    type: string
                  missionType:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                  flight:
                    $ref: '#/definitions/flight'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: Mission doesn't exist
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /mission/filtered-mission:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-filtered-mission
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/update-status:
    patch:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-update-status
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/autocomplete:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-autocomplete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get-total-number-of-mission-by-locationID:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-total-number-of-mission-by-locationID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get-missions-by-location-mapref:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-missions-by-location-mapref
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get-missions-by-locationID:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-missions-by-locationID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get-mission-csv-for-tenant-Or-user:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-mission-csv-for-tenant-Or-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/get-alert-vod-count:
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-get-alert-vod-count
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/insert-missiontype-by-Id:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-insert-missiontype-by-Id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/insert-missionType-for-tenantId:
    post:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-insert-missionType-for-tenantId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /mission/convert-clientId-to-array:
    patch:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-convert-clientId-to-array
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  '/mission/memory-usage/{id}':
    get:
      tags:
        - Mission APIs
      summary: Summary
      description: Description
      operationId: mission-memory-usage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Success
  /missiontype/create:
    post:
      tags:
        - Mission Type APIs
      summary: Summary
      description: Description
      operationId: missiontype-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /missiontype/edit:
    post:
      tags:
        - Mission Type APIs
      summary: Summary
      description: Description
      operationId: missiontype-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /missiontype/delete:
    post:
      tags:
        - Mission Type APIs
      summary: Summary
      description: Description
      operationId: missiontype-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /missiontype/getall:
    get:
      tags:
        - Mission Type APIs
      summary: Summary
      description: Description
      operationId: missiontype-getall
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /model/create:
    post:
      tags:
        - Model APIs
      summary: Summary
      description: Description
      operationId: model-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /model/get:
    get:
      tags:
        - Model APIs
      summary: Summary
      description: Description
      operationId: model-get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /model/get-by-id:
    get:
      tags:
        - Model APIs
      summary: Summary
      description: Description
      operationId: model-get-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /model/update:
    patch:
      tags:
        - Model APIs
      summary: Summary
      description: Description
      operationId: model-update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /model/delete:
    delete:
      tags:
        - Model APIs
      summary: Summary
      description: Description
      operationId: model-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenantroot/fetch-organisation-details:
    post:
      tags:
        - Organisation APIs
      summary: Summary
      description: Description
      operationId: fetch-organisation-details
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenantroot/update-organisation-details:
    post:
      tags:
        - Organisation APIs
      summary: Summary
      description: Description
      operationId: update-organisation-details
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenantroot/request-otp-for-email-change:
    post:
      tags:
        - Organisation APIs
      summary: Summary
      description: Description
      operationId: request-otp-for-email-change
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenantroot/resend-otp-for-email-change:
    post:
      tags:
        - Organisation APIs
      summary: Summary
      description: Description
      operationId: resend-otp-for-email-change
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenantroot/validate-otp-update-email:
    post:
      tags:
        - Organisation APIs
      summary: Summary
      description: Description
      operationId: validate-otp-update-email
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/upload-poster:
    post:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-upload-poster
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/create:
    post:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/fetchall:
    get:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-fetchall
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/fetchactive:
    get:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-fetchactive
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/edit-package-for-Id:
    patch:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /package/delete-package-for-Id:
    delete:
      tags:
        - Package APIs
      summary: Summary
      description: Description
      operationId: package-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /payment/generate-order:
    post:
      tags:
        - Payment APIs
      summary: Summary
      description: Description
      operationId: payment-generate-order
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /payment/complete-order:
    post:
      tags:
        - Payment APIs
      summary: Summary
      description: Description
      operationId: payment-complete-order
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /payment/payment-fail:
    post:
      tags:
        - Payment APIs
      summary: Summary
      description: Description
      operationId: payment-fail
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /payment/handle-webhook:
    post:
      tags:
        - Payment APIs
      summary: Summary
      description: Description
      operationId: payment-handle-webhook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  '/payment/get-payments/{tenantId}':
    post:
      tags:
        - Payment APIs
      summary: Summary
      description: Description
      operationId: payment-get-payments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
        - in: path
          name: tenantId
          required: true
          type: string
      responses:
        '200':
          description: Success
  /permission/create:
    post:
      tags:
        - Permission APIs
      summary: Summary
      description: Description
      operationId: permission-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /permission/admin-permission-list:
    get:
      tags:
        - Permission APIs
      summary: Summary
      description: Description
      operationId: admin-permission-list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /permission/tenant-permission-list:
    get:
      tags:
        - Permission APIs
      summary: Summary
      description: Description
      operationId: tenant-permission-list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /pilot/login:
    post:
      tags:
        - Pilot APIs
      summary: Summary
      description: Description
      operationId: pilot-login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /pilot/get-all-pilots:
    get:
      tags:
        - Pilot APIs
      summary: Summary
      description: Description
      operationId: pilot-get-all-pilots
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /rasterProp/create:
    post:
      tags:
        - Raster Props APIs
      summary: Summary
      description: Description
      operationId: rasterprops-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /rasterProp/get-by-ID:
    get:
      tags:
        - Raster Props APIs
      summary: Summary
      description: Description
      operationId: rasterprops-get-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /rasterProp/get-all-rasterProps:
    get:
      tags:
        - Raster Props APIs
      summary: Summary
      description: Description
      operationId: rasterprops-get-all-rasterProps
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /streamtoken/gen-stream-token:
    post:
      tags:
        - Stream Token APIs
      summary: Summary
      description: Description
      operationId: gen-stream-token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /streamtoken/validate-token:
    post:
      tags:
        - Stream Token APIs
      summary: Summary
      description: Description
      operationId: validate-token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /streamtoken/get-active-streams:
    get:
      tags:
        - Stream Token APIs
      summary: Summary
      description: Description
      operationId: get-active-streams
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /streamtoken/get-active-stream/flight:
    get:
      tags:
        - Stream Token APIs
      summary: Summary
      description: Description
      operationId: get-active-stream-flight
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /streamtoken/remove-token:
    post:
      tags:
        - Stream Token APIs
      summary: Summary
      description: Description
      operationId: remove-token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/upload-avatar:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-upload-avatar
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/create:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/register-tenant:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-register
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/verify-tenant:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-verify
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/resend-verification-code:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-resend-verification-code
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/fetch-active-package-public:
    get:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-fetch-active-package-public
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/fetchall:
    get:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-fetchall
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/add-initial-package:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-add-initial-package
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/edit-tenant:
    patch:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/fetch-tenant-details:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-fetch-details
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/add-all-count-to-tenant:
    patch:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: add-all-count-to-tenant
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/add-actualSize-to-tenant:
    post:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: add-actualSize-to-tenant
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/delete-tenant:
    delete:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/get-tenant-stats:
    get:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-get-stats
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /tenant/updatepublicMapRef:
    patch:
      tags:
        - Tenant APIs
      summary: Summary
      description: Description
      operationId: tenant-updatepublicMapRef
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /testt:
    get:
      tags:
        - Test APIs
      summary: Summary
      description: Description
      operationId: testt
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /broadcast-test:
    get:
      tags:
        - Test APIs
      summary: Summary
      description: Description
      operationId: broadcast-test
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /viewer-test:
    get:
      tags:
        - Test APIs
      summary: Summary
      description: Description
      operationId: viewer-test
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/upload-profile-picture:
    post:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: user-upload-profile-picture
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/create-tenant-user:
    post:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: create-tenant-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/fetch-all-user:
    get:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: fetch-all-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/edit-user:
    patch:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: edit-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/delete-user:
    delete:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: delete-user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/generate-userList-csv:
    get:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: generate-userlist-csv
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/terms-conditions-check:
    patch:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: user-terms-and-conditions-check
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /user/terms-insert:
    post:
      tags:
        - User APIs
      summary: Summary
      description: Description
      operationId: user-terms-insert
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /usergroup/tenant-usergroup-create:
    post:
      tags:
        - User Group APIs
      summary: Summary
      description: Description
      operationId: tenant-usergroup-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /usergroup/tenant-usergroup-list:
    get:
      tags:
        - User Group APIs
      summary: Summary
      description: Description
      operationId: tenant-usergroup-list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /usergroup/tenant-usergroup-edit:
    patch:
      tags:
        - User Group APIs
      summary: Summary
      description: Description
      operationId: tenant-usergroup-edit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /usergroup/tenant-usergroup-delete:
    delete:
      tags:
        - User Group APIs
      summary: Summary
      description: Description
      operationId: tenant-usergroup-delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /vectorProp/create:
    post:
      tags:
        - Vector Props APIs
      summary: Summary
      description: Description
      operationId: vectorProps-create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /vectorProp/get:
    get:
      tags:
        - Vector Props APIs
      summary: Summary
      description: Description
      operationId: vectorProps-get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/save-VOD:
    post:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-save
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/save-vod-manual:
    post:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-save-manual
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/test-vod-inject:
    patch:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: test-vod-inject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/get-by-missionID:
    get:
      tags:
        - VOD APIs
      description: Fetches VOD by mission Id
      operationId: vod-get-by-missionid
      produces:
        - application/json
      parameters:
        - in: query
          name: missionID
          description: Mission Id whose vods to be fetched
          type: string
        - in: query
          name: page
          description: Pagination page number for paginated results
          type: string
        - in: query
          name: sort
          description: 'String of form ''<field>:<sorting order>'' for sorted results'
          type: string
      responses:
        '200':
          description: VODs fetched successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
              TotalPages:
                type: integer
              data:
                type: array
                items:
                  $ref: '#/definitions/vod'
        '401':
          description: Invalid user id or token
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '404':
          description: No VOD found for given mission ID
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
        '500':
          description: Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
  /VOD/get-count-by-missionID:
    get:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-get-count-by-missionid
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/get-by-flightID:
    get:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-get-by-flightId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/get-by-location-ID:
    get:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-get-by-locationId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/delete-by-ID:
    delete:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-delete-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/delete-multi-by-ID:
    delete:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-delete-multi-by-id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/insert-tenantID:
    patch:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-insert-tenantId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /VOD/edit-by-ID:
    patch:
      tags:
        - VOD APIs
      summary: Summary
      description: Description
      operationId: vod-edit-by-ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /webrtc/broadcaster:
    post:
      tags:
        - WebRTC APIs
      summary: Summary
      description: Description
      operationId: webrtc-broadcaster
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /webrtc/consumer:
    post:
      tags:
        - WebRTC APIs
      summary: Summary
      description: Description
      operationId: webrtc-consumer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
  /webrtc/get-active-streams:
    get:
      tags:
        - WebRTC APIs
      summary: Summary
      description: Description
      operationId: webrtc-get-active-streams
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Description
          schema:
            $ref: '#/definitions/RequestPlaceholder'
      responses:
        '200':
          description: Success
definitions:
  RequestPlaceholder:
    type: object
    properties:
      field1:
        type: string
      field2:
        type: string
    xml:
      name: RequestPlaceholder
  response:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
      data:
        type: object
  alert:
    type: object
    required:
      - missionId
      - locationName
      - createdBy
      - locationId
      - flightId
      - tenantId
      - pcount
      - image
    properties:
      location:
        type: object
        required:
          - lat
          - long
        properties:
          lat:
            type: integer
          long:
            type: integer
      fileSize:
        type: integer
      missionId:
        type: string
      locationName:
        type: string
      createdBy:
        type: string
      locationId:
        type: string
      flightId:
        type: string
      tenantId:
        type: string
      pcount:
        type: integer
      type:
        type: string
      image:
        type: string
      note:
        type: string
      onSite:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  asset:
    type: object
    required:
      - assetName
      - assetOwner
      - modelID
      - manufactureID
      - isActive
      - createdBy
      - createdAt
      - userID
      - tenantID
      - manufactureDate
    properties:
      assetName:
        type: string
      assetOwner:
        type: string
      modelID:
        type: string
      manufactureID:
        type: string
      isActive:
        type: boolean
      createdBy:
        type: string
      createdAt:
        type: string
      userID:
        type: string
      tenantID:
        type: string
      manufactureDate:
        type: string
      assetInfo:
        type: array
        items:
          type: object
      updatedAt:
        type: string
  assetClass:
    type: object
    properties:
      typeName:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
  deliverableTypes:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
      description:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      imageURL:
        type: string
      isActive:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  document:
    type: object
    properties:
      name:
        type: string
      modDate:
        type: string
      fileSize:
        type: integer
      filePath:
        type: string
      fileType:
        type: string
      folderName:
        type: string
      missionId:
        type: string
      tenantId:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  flight:
    type: object
    required:
      - date
      - name
      - mission
      - time
      - duration
      - client
      - tenant
    properties:
      date:
        type: string
      name:
        type: string
      geoLocation:
        type: string
      mission:
        type: string
      centerPoints:
        type: object
        properties:
          lat:
            type: integer
          lng:
            type: integer
      locationID:
        type: string
      assetID:
        type: string
      time:
        type: string
      duration:
        type: string
      pilotID:
        type: string
      geoFence:
        type: object
        properties:
          polygon:
            type: object
            properties:
              points:
                type: array
                items:
                  type: object
                  properties:
                    lat:
                      type: integer
                    lng:
                      type: integer
              area:
                type: integer
              length:
                type: integer
          circle:
            type: object
            properties:
              radius:
                type: integer
              area:
                type: integer
              center:
                type: object
                properties:
                  lat:
                    type: integer
                  lng:
                    type: integer
      client:
        type: string
      tenant:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  flightLog:
    type: object
    properties:
      date:
        type: string
      time:
        type: string
      missionID:
        type: string
      flightID:
        type: string
      assetID:
        type: string
      locationID:
        type: string
      duration:
        type: string
      location:
        type: string
      geofence:
        type: object
      flightArea:
        type: string
      filePath:
        type: string
      pilotName:
        type: string
      jobType:
        type: string
      deliverables:
        type: array
        items:
          type: string
      tenantId:
        type: string
  invite:
    type: object
    required:
      - valid
      - creator
      - missionID
      - email
    properties:
      valid:
        type: boolean
      creator:
        type: string
      missionID:
        type: string
      email:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  layer:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      raster:
        type: string
      vector:
        type: string
      layerpath:
        type: string
      layerdataArr:
        type: array
        items:
          type: object
      color:
        type: string
      minp:
        type: integer
      maxp:
        type: integer
      featureCount:
        type: integer
      layers:
        type: array
        items:
          type: string
      layerLabel:
        type: string
      isPublic:
        type: boolean
      isBase:
        type: boolean
      center:
        type: array
        items:
          type: object
      fileSize:
        type: integer
      capturestring:
        type: string
      missionId:
        type: string
      tenantId:
        type: string
      layerGroupId:
        type: string
      createdBy:
        type: string
      upstringdBy:
        type: string
      createdAt:
        type: string
      upstringdAt:
        type: string
  layerFiles:
    type: object
    required:
      - fileType
    properties:
      name:
        type: string
      layerId:
        type: string
      layers:
        type: array
        items:
          type: string
      sys_Id:
        type: string
      featureLabel:
        type: string
      coverPhoto:
        type: boolean
      fileSize:
        type: integer
      centerPoints:
        type: object
        properties:
          lat:
            type: integer
          lng:
            type: integer
      filePath:
        type: string
      fileType:
        type: string
      tenantId:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      isReview:
        type: boolean
  layerGroup:
    type: object
    required:
      - createdBy
      - tenantId
    properties:
      name:
        type: string
      createdBy:
        type: string
      tenantId:
        type: string
      layers:
        type: array
        items:
          type: array
          items:
            type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  location:
    type: object
    required:
      - tenantId
    properties:
      geometry:
        type: object
        required:
          - type
          - coordinates
        properties:
          type:
            type: string
          coordinates:
            type: string
      properties:
        type: string
      tenantId:
        type: string
  manufacturer:
    type: object
    required:
      - name
      - createdBy
      - tenantID
    properties:
      name:
        type: string
      address:
        type: string
      nationality:
        type: string
      website:
        type: string
      contacts:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            designation:
              type: string
            Mobile:
              type: string
            email:
              type: string
      createdAt:
        type: string
      createdBy:
        type: string
      tenantID:
        type: string
  mission:
    type: object
    required:
      - name
      - assetID
      - missionType
    properties:
      name:
        type: string
      description:
        type: string
      deliverables:
        type: array
        items:
          type: string
      user:
        type: string
      assetID:
        type: string
      clientId:
        type: array
        items:
          type: string
      status:
        type: string
      pilotAssigned:
        type: string
      tenantId:
        type: string
      missionType:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  missionType:
    type: object
    required:
      - name
      - description
      - isActive
    properties:
      name:
        type: string
      description:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      isActive:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  model:
    type: object
    required:
      - modelName
      - assetClassID
      - manufacturerID
      - createdBy
      - tenantID
    properties:
      modelName:
        type: string
      modelinteger:
        type: string
      assetClassID:
        type: string
      dimensions:
        type: object
        properties:
          length:
            type: integer
          breadth:
            type: integer
          height:
            type: integer
      manufacturerID:
        type: string
      website:
        type: string
      createdBy:
        type: string
      tenantID:
        type: string
      props:
        type: object
      createdAt:
        type: string
      updatedAt:
        type: string
  package:
    type: object
    required:
      - name
      - bandwidth
      - storage
      - duration
      - userCount
      - missionCount
      - alertCount
      - vodCount
      - layerCount
      - clientCount
      - locationCount
      - userGroupCount
      - poster
      - isActive
    properties:
      name:
        type: string
      bandwidth:
        type: integer
      storage:
        type: integer
      duration:
        type: integer
      userCount:
        type: integer
      missionCount:
        type: integer
      alertCount:
        type: integer
      vodCount:
        type: integer
      layerCount:
        type: integer
      clientCount:
        type: integer
      locationCount:
        type: integer
      userGroupCount:
        type: integer
      poster:
        type: string
      price:
        type: integer
      createdBy:
        type: string
      updatedBy:
        type: string
      isActive:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  payment:
    type: object
    properties:
      razorpay_order_id:
        type: string
      razorpay_payment_id:
        type: string
      razorpay_signature:
        type: string
      amount:
        type: integer
      currency:
        type: string
      status:
        type: string
      tenant:
        type: string
      package:
        type: string
      paidon:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  permission:
    type: object
    required:
      - name
      - isFrontendRoute
      - isSideNavOption
      - isPilot
      - isClient
      - isVisibleToTenant
      - isVisibleToSuperAdmin
      - isActive
    properties:
      name:
        type: string
      isFrontendRoute:
        type: boolean
      isSideNavOption:
        type: boolean
      isPilot:
        type: boolean
      isClient:
        type: boolean
      frontendRoute:
        type: string
      sideNavOptionIcon:
        type: string
      sideNavOptionLabel:
        type: string
      isVisibleToTenant:
        type: boolean
      isVisibleToSuperAdmin:
        type: boolean
      createdBy:
        type: string
      updatedBy:
        type: string
      isActive:
        type: boolean
      description:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  rasterprops:
    type: object
    properties:
      name:
        type: string
      bidx:
        type: string
      bandExp:
        type: string
      colorMap:
        type: string
      resamplingMethod:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  session:
    type: object
    required:
      - owner
    properties:
      valid:
        type: boolean
      owner:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  streamKey:
    type: object
    required:
      - isActive
      - pStatus
      - createdBy
      - createdAt
      - tenantID
      - missionID
      - flightID
    properties:
      isActive:
        type: boolean
      pStatus:
        type: boolean
      createdBy:
        type: string
      createdAt:
        type: string
      streamKey:
        type: string
      tenantID:
        type: string
      assetID:
        type: string
      missionID:
        type: string
      flightID:
        type: string
      locationID:
        type: string
      updatedAt:
        type: string
  tenant:
    type: object
    required:
      - name
      - phoneNo
      - email
      - contactPerson
      - gstNumber
      - billingAddressLine1
      - billingCity
      - billingDistrict
      - billingState
      - billingPin
      - isActive
      - isActivated
      - bandwidthUsed
      - storageUsed
      - actualSize
      - actualUserCount
      - actualMissionCount
      - actualAlertCount
      - actualVodCount
      - actualLayerCount
      - actualClientCount
      - actualLocationCount
      - actualUserGroupCount
    properties:
      name:
        type: string
      phoneNo:
        type: string
      email:
        type: string
      contactPerson:
        type: string
      registrationNumber:
        type: string
      officialWebsite:
        type: string
      avatar:
        type: string
      gstNumber:
        type: string
      billingAddressLine1:
        type: string
      billingAddressLine2:
        type: string
      billingCity:
        type: string
      billingDistrict:
        type: string
      billingState:
        type: string
      billingPin:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      activePackage:
        type: string
      upcomingPackages:
        type: array
        items:
          type: string
      publicMapRef:
        type: string
      isActive:
        type: boolean
      isActivated:
        type: boolean
      modefiedEmailRequested:
        type: string
      modefiedEmailRequestedOTPs:
        type: array
        items:
          type: integer
      modefiedphoneNoRequested:
        type: string
      modefiedphoneNoRequestedOTPs:
        type: array
        items:
          type: integer
      bandwidthUsed:
        type: integer
      storageUsed:
        type: integer
      packageStartDate:
        type: string
      actualSize:
        type: number
      actualUserCount:
        type: integer
      actualMissionCount:
        type: integer
      actualAlertCount:
        type: integer
      actualVodCount:
        type: integer
      actualLayerCount:
        type: integer
      actualClientCount:
        type: integer
      actualLocationCount:
        type: integer
      actualUserGroupCount:
        type: integer
      verificationCode:
        type: integer
      isVerified:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  user:
    type: object
    required:
      - name
      - phoneNo
      - email
      - userType
      - isActive
      - isBanned
      - isTermsAccepted
      - city
      - country
      - expiryDatee
    properties:
      tenantId:
        type: string
      userGroupId:
        type: string
      name:
        type: string
      phoneNo:
        type: string
      email:
        type: string
      password:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      userType:
        type: string
      customPermissions:
        type: array
        items:
          type: string
      dob:
        type: string
      aadhaarNo:
        type: string
      pilotLicenceNo:
        type: string
      isActive:
        type: boolean
      isBanned:
        type: boolean
      isTermsAccepted:
        type: boolean
      city:
        type: string
      country:
        type: string
      expiryDatee:
        type: string
      avatar:
        type: string
      passwordResetToken:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  usergroup:
    type: object
    required:
      - name
      - isActive
    properties:
      name:
        type: string
      permissions:
        type: array
        items:
          type: string
      tenantId:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
      isActive:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
  vectorprops:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      createdBy:
        type: string
      updatedBy:
        type: string
  vod:
    type: object
    required:
      - flightID
      - missionID
      - locationID
      - videoPath
      - thumbnail
      - videoName
    properties:
      flightID:
        type: string
      missionID:
        type: string
      locationID:
        type: string
      videoPath:
        type: string
      thumbnail:
        type: string
      tenantId:
        type: string
      fileSize:
        type: number
      videoName:
        type: string
      isSRT:
        type: boolean
        default: false
      createdAt:
        type: string
      updatedAt:
        type: string
